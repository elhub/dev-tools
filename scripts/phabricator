#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([action],[Valid actions are 'install' and 'upgrade'.],[])
# ARG_HELP([Utility script to install and upgrade client-side phabricator extensions and tools.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Utility script to install and upgrade client-side phabricator extensions and tools."
	printf 'Usage: %s [-h|--help] <action>\n' "$0"
	printf '\t%s\n' "<action>: Valid actions are 'install' and 'upgrade'."
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'action'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_action "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

ORIGIN_PATH=`pwd`
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_CHECKSTYLE="checkstyle/repo"
REPO_DETEKT="detekt/repo"

ensure_checkstyle()
{
  cd "$SCRIPT_PATH"/.. || exit 1
  git clone https://github.com/checkstyle/checkstyle.git "$REPO_CHECKSTYLE" 2> /dev/null || (cd "$REPO_CHECKSTYLE" || exit 1; git pull)
  cd $REPO_CHECKSTYLE || exit 1
  mvn -DskipTests package
  cd ../..
  rm $REPO_CHECKSTYLE/target/*tests.jar
  ln -s $REPO_CHECKSTYLE/target/`ls -rt $REPO_CHECKSTYLE/target | tail -n1` checkstyle/checkstyle.jar
}

ensure_detekt()
{
  cd "$SCRIPT_PATH"/.. || exit 1
  git clone https://github.com/arturbosch/detekt.git "$REPO_DETEKT" 2> /dev/null || (cd "$REPO_DETEKT" || exit 1; git pull)
  cd $REPO_DETEKT || exit 1
  ./gradlew build -x test
  cd ../..
  ln -s $REPO_DETEKT/build/libs/`ls -rt $REPO_DETEKT/build/libs | tail -n1` detekt/detekt.jar
}

ensure_arcanist()
{
  cd "$SCRIPT_PATH"/.. || exit 1
  git clone https://github.com/phacility/libphutil.git libphutil 2> /dev/null || (cd libphutil || exit 1; git pull)
  git clone https://github.com/phacility/arcanist.git arcanist 2> /dev/null || (cd arcanist || exit 1; git pull)
}

if [ "$_arg_action" == "install" ] || [ "$_arg_action" == "upgrade" ]
then
  cd "$SCRIPT_PATH"/.. || exit 1
  git pull
  ensure_arcanist
  ensure_checkstyle
  ensure_detekt
  cd "$ORIGIN_PATH" || exit 1
else
  print_help
fi

# ] <-- needed because of Argbash