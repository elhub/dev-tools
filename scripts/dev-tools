#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([action],[Valid actions are 'install' and 'upgrade'.],[])
# ARG_HELP([Utility script to install and upgrade client-side dev-tools extensions and tools.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
  printf '%s\n' "Utility script to install and upgrade client-side phabricator extensions and tools."
  printf 'Usage: %s [-h|--help] <action>\n' "$0"
  printf '\t%s\n' "<action>: Valid actions are 'install' and 'upgrade'."
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'action'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_action "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

ORIGIN_PATH=`pwd`
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEV_HOME="$SCRIPT_PATH"/..
REPO_ADRJ="lib/adr-j"
REPO_CHECKSTYLE="lib/checkstyle"
REPO_DETEKT="lib/detekt"


build_adrj()
{
  cd "$DEV_HOME"/$REPO_ADRJ || exit 1
  ./gradlew clean releaseJar
  cd "$DEV_HOME" || exit 1
  chmod 755 "$DEV_HOME"/$REPO_ADRJ/launch-scripts/adr
  ln -sf "$DEV_HOME"/$REPO_ADRJ/launch-scripts/adr scripts
}

ensure_adrj()
{
  cd "$DEV_HOME" || exit 1
  if [ "$_arg_action" == "install" ]; then
    rm -rf $REPO_ADRJ
  fi
  if [ -d $REPO_ADRJ ]; then
      cd $REPO_ADRJ || exit 1
      if [[ `git status --porcelain` ]]; then
          git pull
          build_adrj
      fi
  else
      git clone https://github.com/adoble/adr-j.git "$REPO_ADRJ" 2> /dev/null
      build_adrj
  fi
}

ensure_arcanist()
{
  cd "$SCRIPT_PATH"/.. || exit 1
  git clone https://github.com/phacility/libphutil.git lib/libphutil 2> /dev/null || (cd lib/libphutil || exit 1; git pull)
  git clone https://github.com/phacility/arcanist.git lib/arcanist 2> /dev/null || (cd lib/arcanist || exit 1; git pull)
}

build_checkstyle()
{
  cd "$DEV_HOME"/$REPO_CHECKSTYLE || exit 1
  mvn -DskipTests -P assembly -q clean package
  cd "$DEV_HOME" || exit 1
  rm $REPO_CHECKSTYLE/target/*tests.jar
  mv $(ls -rt $REPO_CHECKSTYLE/target/*-all.jar | tail -n1) lib/checkstyle.jar
  chmod 755 $DEV_HOME/lib/checkstyle.jar
}

ensure_checkstyle()
{
  cd "$DEV_HOME" || exit 1
  if [ "$_arg_action" == "install" ]; then
    rm -rf $REPO_CHECKSTYLE
  fi
  if [ -d $REPO_CHECKSTYLE ]; then
      cd $REPO_CHECKSTYLE || exit 1
      if [[ `git status --porcelain` ]]; then
          git pull
          build_checkstyle
      fi
  else
      git clone https://github.com/checkstyle/checkstyle.git "$REPO_CHECKSTYLE" 2> /dev/null
      build_checkstyle
  fi
}

build_detekt()
{
  cd "$DEV_HOME"/$REPO_DETEKT || exit 1
  ./gradlew clean build shadowJar -x test -q
  cd "$DEV_HOME" || exit 1
  mv `ls -rt $REPO_DETEKT/detekt-cli/build/libs/*-all.jar | tail -n1` lib/detekt.jar
  chmod 755 lib/detekt.jar
}

ensure_detekt()
{
  cd "$DEV_HOME" || exit 1
  if [ "$_arg_action" == "install" ]; then
    rm -rf $REPO_DETEKT
  fi
  if [ -d $REPO_DETEKT ]; then
      cd $REPO_DETEKT || exit 1
      if [[ `git status --porcelain` ]]; then
          git pull
          build_detekt
      fi
  else
      git clone https://github.com/arturbosch/detekt.git "$REPO_DETEKT" 2> /dev/null
      build_detekt
  fi
}

if [ "$_arg_action" == "install" ] || [ "$_arg_action" == "upgrade" ]; then
  cd "$SCRIPT_PATH"/.. || exit 1
  git pull
  ensure_adrj
  ensure_arcanist
  ensure_checkstyle
  ensure_detekt
  cd "$ORIGIN_PATH" || exit 1
else
  print_help
fi

# ] <-- needed because of Argbash
