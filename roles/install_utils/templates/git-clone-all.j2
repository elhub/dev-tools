#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([repository],[The repository group to clone: 'all', 'common', 'elhub', 'core', 'services', 'reporting'', 'interface', 'test', or 'dev-tools'.],[])
# ARG_HELP([Utility script to clone a set of Team Dev repositories.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}


begins_with_short_option()
{
    local first_option all_short_options='h'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_repository="all"
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
    printf '%s\n' "Utility script to clone a set of Team Dev repositories."
    printf 'Usage: %s [-h|--help] [<repository>]\n' "$0"
    printf '\t%s\n' "<repository>: The repository group to clone: 'all', 'common', 'elhub', 'core', 'services', 'reporting'', 'interface', 'test', or 'dev-tools'. (default: 'all')"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_repository "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

clone_repo() {
    if [ $1 == "bitbucket" ]; then
        repo_uri="https://code.elhub.cloud/scm"
    elif [ $1 == "github" ]; then
        repo_uri="git://github.com/elhub"
    else
        echo "Unknown repo type $1"
        exit -1
    fi
    repo_path=$2

    if [ ! -d $repo_path ]; then
        echo "Cloning $repo_path..."
        git clone $repo_uri/$repo_path
    else
        echo $repo_path "exists. Skipping..."
    fi
}

clone_all_repos() {
    callsign=$1
    slug=$2

    for repo in $(curl --silent --user $(whoami) https://code.elhub.cloud/rest/api/1.0/projects/$callsign/repos?limit=100 | jq -r '.values[] | .slug' | grep -e $slug)
    do
        clone_repo "bitbucket" $callsign/$repo.git
    done

    for repo in $(curl --silent  "https://api.github.com/orgs/elhub/repos?page=$page&per_page=100" | jq -r '.[].name' | grep -e $slug)
    do
        clone_repo "github" $repo.git
    done
}


# All Elhub Repositories
if echo "$_arg_repository" | grep -E '(all|elhub)' >/dev/null; then
    clone_all_repos "elh" "elhub-"
fi

# Common Repositories
if echo "$_arg_repository" | grep -E '(all|common)' >/dev/null; then
    clone_all_repos "com" "common-"
fi

# Core Platform Repositories
if echo "$_arg_repository" | grep -E '(core)' >/dev/null; then
    clone_all_repos "elh" "elhub-core-"
    clone_all_repos "elh" "elhub-cp-"
fi

# Services Platform Repositories
if echo "$_arg_repository" | grep -E '(services)' >/dev/null; then
    clone_all_repos "elh" "elhub-services-"
    clone_all_repos "elh" "elhub-sp-"
fi

# Reporting Platform Repositories
if echo "$_arg_repository" | grep -E '(reporting)' >/dev/null; then
    clone_all_repos "elh" "elhub-reporting-"
    clone_all_repos "elh" "elhub-rp-"
fi

# User Interface Repositories
if echo "$_arg_repository" | grep -E '(interface)' >/dev/null; then
    clone_all_repos "elh" "elhub-user-"
    clone_all_repos "elh" "elhub-ui-"
fi

# Test Platform Repositories
if echo "$_arg_repository" | grep -E '(all|test)' >/dev/null; then
    clone_all_repos "test" "test"
fi

# Dev Tools Repositories
if echo "$_arg_repository" | grep -E '(all|dev-tools)' >/dev/null; then
    clone_all_repos "dev" "dev-tools"
fi

# ] <-- needed because of Argbash
